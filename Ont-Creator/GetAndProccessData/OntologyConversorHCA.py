from OntologyConversorAbstract import OntologyConversorAbstract
from Project import Project
from Specimen import Specimen

download_links = {
    '1.3 Million Brain Cells from E18 Mice': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'A Single-Cell Transcriptomic Map of the Human and Mouse Pancreas Reveals Inter- and Intra-cell Population Structure': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'A single-cell molecular map of mouse gastrulation and early organogenesis': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'A single-cell reference map of transcriptional states for human blood and tissue T cell activation': {
        'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-8/download?fileType=experiment-design&accessKey=',
        'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-8/download/zip?fileType=normalised&accessKey=',
        'filtered': None,
    },
    'A single-cell transcriptome atlas of the adult human retina': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'Assessing the relevance of organoids to model inter-individual variation': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'Bone marrow plasma cells from hip replacement surgeries': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'Cell hashing with barcoded antibodies enables multiplexing and doublet detection for single cell genomics': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'Census of Immune Cells': {
        'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-4/download?fileType=experiment-design&accessKey=',
        'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-4/download/zip?fileType=normalised&accessKey=',
        'filtered': None,
    },
    'Comparison, calibration, and benchmarking of high-throughput single cell RNA-Seq techniques for unbiased cell-type classification': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'Dissecting the human liver cellular landscape by single cell RNA-seq reveals novel intrahepatic monocyte/ macrophage populations': {
        'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-9/download?fileType=experiment-design&accessKey=',
        'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-9/download/zip?fileType=normalised&accessKey=',
        'filtered': None,
    },
    'Ischaemic sensitivity of human tissue by single cell RNA seq': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'Melanoma infiltration of stromal and immune cells': {
        'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-EHCA-2/download?fileType=experiment-design&accessKey=',
        'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-EHCA-2/download/zip?fileType=quantification-filtered&accessKey=',
        'filtered': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-EHCA-2/download/zip?fileType=quantification-filtered&accessKey=',
    },
    'Precursors of human CD4+ cytotoxic T lymphocytes identified by single-cell transcriptome analysis': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'Profiling of CD34+ cells from human bone marrow to understand hematopoiesis': {
        'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-6/download?fileType=experiment-design&accessKey=',
        'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-6/download/zip?fileType=normalised&accessKey=',
        'filtered': None,
    },
    'Reconstructing the human first trimester fetal-maternal interface using single cell transcriptomics': {
        'metadata': [
            'https://www.ebi.ac.uk/gxa/sc/experiment/E-MTAB-6701/download?fileType=experiment-design&accessKey=',
            'https://www.ebi.ac.uk/gxa/sc/experiment/E-MTAB-6678/download?fileType=experiment-design&accessKey='
        ],
        'matrix': [
            'https://www.ebi.ac.uk/gxa/sc/experiment/E-MTAB-6701/download/zip?fileType=normalised&accessKey=',
            'https://www.ebi.ac.uk/gxa/sc/experiment/E-MTAB-6678/download/zip?fileType=normalised&accessKey=',
        ],
        'filtered': None,
    },
    'Single Cell Transcriptomics of a Human Kidney Allograft Biopsy Defines a Diverse Inflammatory Response': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'Single cell profiling of human induced dendritic cells generated by direct reprogramming of embryonic fibroblasts': {
        'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-13/download?fileType=experiment-design&accessKey=',
        'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-13/download/zip?fileType=normalised&accessKey=',
        'filtered': None,
    },
    'Single cell transcriptome analysis of human pancreas reveals transcriptional signatures of aging and somatic mutation patterns.': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'Single-cell RNA-seq analysis  throughout a 125-day differentiation protocol that converted H1 human embryonic stem cells to a variety of ventrally-derived cell types.': {
        'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-GEOD-93593/download?fileType=experiment-design&accessKey=',
        'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-GEOD-93593/download/zip?fileType=normalised&accessKey=',
        'filtered': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-GEOD-93593/download/zip?fileType=quantification-filtered&accessKey=',
    },
    'Single-cell RNA-seq analysis of human pancreas from healthy individuals and type 2 diabetes patients': {
        'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-MTAB-5061/download?fileType=experiment-design&accessKey=',
        'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-MTAB-5061/download/zip?fileType=normalised&accessKey=',
        'filtered': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-MTAB-5061/download/zip?fileType=quantification-filtered&accessKey=',
    },
    'Spatio-temporal immune zonation of the human kidney': {
        'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-10/download?fileType=experiment-design&accessKey=',
        'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-10/download/zip?fileType=normalised&accessKey=',
        'filtered': None,
    },
    'Structural Remodeling of the Human Colonic Mesenchyme in Inflammatory Bowel Disease': {
        'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-11/download?fileType=experiment-design&accessKey=',
        'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-11/download/zip?fileType=normalised&accessKey=',
        'filtered': None,
    },
    'Systematic comparative analysis of single cell RNA-sequencing methods': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'Tabula Muris: Transcriptomic characterization of 20 organs and tissues from Mus musculus at single cell resolution': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'The Single Cell Transcriptomic Landscape of Early Human Diabetic Nephropathy': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'The emergent landscape of the mouse gut endoderm at single-cell resolution': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },
    'Transcriptomic classification of human retinal cell types with single-nuclei RNA-seq.': {
        'metadata': None,
        'matrix': None,
        'filtered': None,
    },

}


def update_min_max(old_min, old_max, new_min, new_max):
    min_rt = min(old_min, old_max)
    max_rt = max(new_min, new_max)
    return min_rt, max_rt


class OntologyConversorHCA(OntologyConversorAbstract):

    ####################################################
    # region Define super class abstract methods

    def init_map(self):
        mapping_dict = {
            'Melanoma(Disease)': 'Melanoma',
            'Cataract(Disease)': 'Cataract',
            'UlcerativeColitis(Disease)': 'UlcerativeColitis',
            'Colitis(Disease)': 'UlcerativeColitis',
            'BenignProstaticHyperplasia(Disease)': 'BenignProstaticHyperplasia',
            'PericardialEffusion(Disease)': 'PericardialEffusion',
            'HiatusHernia(Disease)': 'HiatusHernia',
            'Hyperlipidemia(Disease)': 'Hyperlipidemia',
            'Non-AlcoholicFattyLiverDisease': 'NonAlcoholicFattyLiverDisease',
            'Hemolytic-UremicSyndrome': 'HemolyticUremicSyndrome',
            'Osteoarthritis,Hip': 'OsteoarthritisHip',
            'CAFs': 'Cancer-associatedFibroblasts(CAFs)',
            'IlluminaHiseq2500': 'IlluminaHiSeq2500',
            'Smart-Seq2': 'Smart-seq2',
            'Smart-Seq': 'Smart-seq',
            'Sci-RNA-Seq': 'Sci-RNA-seq',
            'MARS-Seq': 'MARS-seq',
            'CEL-Seq2': 'CEL-seq2',
            'CITE-Seq': 'CITE-seq',
            'DroNc-Seq': 'DroNc-seq',
            'Drop-Seq': 'Drop-seq',
            'Seq-Well': 'Seq-well',
            'CD8-Positive,Alpha-BetaTCell': 'CD8+AlphaBetaTcell',
            'CD11B+CD11C+DC': 'CD11b+CD11c+DC',
            'CD11C+DC': 'CD11c+DC',
            'CD11B+Macrophages/Monocytes': 'CD11b+Macrophages/Monocytes',
            'CD34-Positive,CD38-NegativeHematopoieticStemCell': 'CD34+CD38-HematopoieticStemCell',
            'EffectorMemoryCD8-Positive,Alpha-BetaTCell,TerminallyDifferentiated': 'EffectorMemoryCD8+AlphaBetaTCellTerminallyDifferentiated',
            '10XV2Sequencing': '10Xv2Sequencing',
            '10XV3Sequencing': '10xv3Sequencing',
            "10X3'V1Sequencing": "10X3v1Sequencing",
            "10X3'V2Sequencing": "10X3v2Sequencing",
            "10X3'V3Sequencing": "10x3v3Sequencing",
            "10X5'V2Sequencing": "10X5v2Sequencing",
            'CDNALibraryConstruction': 'cDNALibraryConstruction',
            'BladderOrgan': 'Bladder',
            'MuscleOrgan': 'Muscle',
            'SkinOfBody': 'Skin',
            'SkinEpidermis': 'Epidermis',
            'Cryopreservation,Other': 'CryopreservationOther',
            'CryopreservationInLiquidNitrogen(DeadTissue)': 'CryopreservationInLiquidNitrogenDeadTissue',
            'Optimus_V1.3.1': 'Optimus_v1.3.1',
            'Optimus_V1.3.2': 'Optimus_v1.3.2',
            'Optimus_V1.3.3': 'Optimus_v1.3.3',
            'Optimus_V1.3.5': 'Optimus_v1.3.5',
            'Smartseq2_V2.3.0': 'Smartseq2_v2.3.0',
            'Smartseq2_V2.4.0': 'Smartseq2_v2.4.0',
            'StemCell-Derived': 'StemCellDerived',
            'Metadata': 'ExperimentDesign',
            'Normal': 'Control',
            'ObstructiveSleepApneaSyndrome': 'ObstructiveSleepApnea',
            'CD4+TCell': 'Tcell',
            'TCell': 'Tcell',
            'BCell': 'Bcell',
            'PresumptiveGut': 'presumptiveGut'
        }

        return mapping_dict

    def format_concrete_specimen(self, raw_specimen, specimen_id):
        specimen = Specimen(specimen_id)

        specimen.part_of_collection = "HumanCellAtlas"
        specimen.part_of_repository = "HumanCellAtlas"

        # Cell Lines
        specimen = self.__format_HCD_cell_lines(specimen, raw_specimen)

        # Cell Suspensions
        specimen = self.__format_HCD_cell_suspensions(specimen, raw_specimen)

        # Donor Organism
        specimen = self.__format_HCD_donor_organism_SR(specimen, raw_specimen)

        # Projects
        specimen = self.__format_HCD_projects(specimen, raw_specimen)

        # Organoids
        specimen = self.__format_HCD_organoids(specimen, raw_specimen)

        # Protocols
        specimen = self.__format_HCD_protocols(specimen, raw_specimen)

        # Samples
        specimen = self.__format_HCD_samples(specimen, raw_specimen)

        # Specimens
        specimen = self.__format_HCD_specimens_SR(specimen, raw_specimen)

        self.specimen = specimen

    def format_concrete_project(self, raw_project, project_id):

        project = Project(project_id)

        project.part_of_collection = "HumanCellAtlas"
        project.part_of_repository = "HumanCellAtlas"
        project.project_id = raw_project["entryId"]

        project.repository_link = "https://data.humancellatlas.org/explore/projects/" + project.project_id

        # Cell Lines
        project = self.__format_HCD_cell_lines(project, raw_project)

        # Protocols
        project = self.__format_HCD_protocols(project, raw_project)

        # Projects
        project = self.__format_HCD_projects_PR(project, raw_project)

        # Samples
        project = self.__format_HCD_samples(project, raw_project)

        # Specimens
        project = self.__format_HCD_specimens_PR(project, raw_project)

        # Donor Organism
        project = self.__format_HCD_donor_organism_PR(project, raw_project)

        # Organoids
        project = self.__format_HCD_organoids(project, raw_project)

        # Cell Suspensions
        project = self.__format_HCD_cell_suspensions(project, raw_project)

        project.normalised_counts_link = download_links[project.project_title]['matrix']
        project.experiment_design_link = download_links[project.project_title]['metadata']
        project.filtered_TPM_link = download_links[project.project_title]['filtered']

        self.project = project

    def parse_concrete(self, word):
        aux = list(word.title())

        for i in range(len(word)):
            if word[i].isupper():
                aux[i] = word[i]

        aux = ''.join(aux).replace(' ', '')

        return aux

    # endregion
    ####################################################

    ####################################################
    # region individual function auxiliar parts

    def __format_HCD_cell_lines(self, individual, individual_hca):
        if not individual_hca['cellLines']:
            return individual

        cell_line_type = individual_hca['cellLines'][0]['cellLineType']
        model_organ = individual_hca['cellLines'][0]['modelOrgan']

        individual.cell_line_type = self.parse_word(cell_line_type)
        individual.model_organ = self.parse_word(model_organ)

        return individual

    def __format_HCD_cell_suspensions(self, individual, individual_hca):
        if not individual_hca['cellSuspensions']:
            return individual

        selected_cell_type = []
        total_cells = 0

        for cellSuspension in individual_hca['cellSuspensions']:
            selected_cell_type += cellSuspension['selectedCellType']
            total_cells += 0 if cellSuspension['totalCells'] is None else cellSuspension['totalCells']

        if total_cells == 0:
            total_cells = -1

        individual.cell_type = self.parse_word(selected_cell_type)
        individual.total_cell_counts = total_cells

        return individual


    def __format_HCD_projects(self, individual, individual_hca):
        if not individual_hca['projects']:
            return individual

        laboratory = individual_hca['projects'][0]['laboratory']
        project_shortname = individual_hca['projects'][0]['projectShortname']
        project_title = individual_hca['projects'][0]['projectTitle']

        individual.laboratory = laboratory
        individual.project_short_name = project_shortname
        individual.project_title = project_title

        return individual

    def __format_HCD_organoids(self, individual, individual_hca):
        if not individual_hca['organoids']:
            return individual

        model_organ = individual_hca['organoids'][0]['modelOrgan']

        individual.model_organ = self.parse_word(model_organ)

        return individual

    def __format_HCD_protocols(self, individual, individual_hca):
        if not individual_hca['protocols']:
            return individual

        workflow = None
        library_construction_approach = None
        paired_end = None
        instrument_manufacturer_model = None
        nucleic_acid = None

        for protocol in individual_hca['protocols']:
            if 'workflow' in protocol:
                workflow = protocol['workflow']
            if 'libraryConstructionApproach' in protocol:
                library_construction_approach = protocol['libraryConstructionApproach']
            if 'nucleicAcidSource' in protocol:
                nucleic_acid = protocol['nucleicAcidSource']
            if 'instrumentManufacturerModel' in protocol:
                instrument_manufacturer_model = protocol['instrumentManufacturerModel']
            if 'pairedEnd' in protocol:
                paired_end = protocol['pairedEnd']

        individual.instrument = self.parse_word(instrument_manufacturer_model)
        individual.library = self.parse_word(library_construction_approach)
        individual.paired_end = paired_end
        individual.analysis_protocol = self.parse_word(workflow)
        individual.nucleic_acid = self.parse_word(nucleic_acid)

        return individual

    def __format_HCD_samples(self, individual, individual_hca):
        if not individual_hca['samples']:
            return individual

        sample_entity_type = individual_hca['samples'][0]['sampleEntityType']

        individual.sample_type = self.parse_word(sample_entity_type)

        try:
            preservation_method = individual_hca['samples'][0]['preservationMethod']

            individual.preservation = self.parse_word(preservation_method)

            return individual
        except:
            return individual


    # endregion
    ####################################################

    ####################################################
    # region specimen function auxiliar parts

    def __format_HCD_specimens_SR(self, specimen, specimen_hca):
        if not specimen_hca['specimens']:
            return specimen

        specimen = self.__format_HCD_specimens_PR(specimen, specimen_hca)

        sample_id = specimen_hca['specimens'][0]['id'][0]

        specimen.specimen_ID = sample_id

        return specimen

    def __format_HCD_donor_organism_SR(self, specimen, specimen_hca):
        if not specimen_hca['donorOrganisms']:
            return specimen

        biological_sex = specimen_hca['donorOrganisms'][0]['biologicalSex']
        disease = specimen_hca['donorOrganisms'][0]['disease']
        genus_species = specimen_hca['donorOrganisms'][0]['genusSpecies']
        organism_ages = specimen_hca['donorOrganisms'][0]['organismAge']
        from OntologyConversorAbstract import OntologyConversorAbstract
        from Project import Project
        from Specimen import Specimen

        download_links = {
            '1.3 Million Brain Cells from E18 Mice': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'A Single-Cell Transcriptomic Map of the Human and Mouse Pancreas Reveals Inter- and Intra-cell Population Structure': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'A single-cell molecular map of mouse gastrulation and early organogenesis': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'A single-cell reference map of transcriptional states for human blood and tissue T cell activation': {
                'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-8/download?fileType=experiment-design&accessKey=',
                'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-8/download/zip?fileType=normalised&accessKey=',
                'filtered': None,
            },
            'A single-cell transcriptome atlas of the adult human retina': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'Assessing the relevance of organoids to model inter-individual variation': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'Bone marrow plasma cells from hip replacement surgeries': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'Cell hashing with barcoded antibodies enables multiplexing and doublet detection for single cell genomics': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'Census of Immune Cells': {
                'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-4/download?fileType=experiment-design&accessKey=',
                'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-4/download/zip?fileType=normalised&accessKey=',
                'filtered': None,
            },
            'Comparison, calibration, and benchmarking of high-throughput single cell RNA-Seq techniques for unbiased cell-type classification': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'Dissecting the human liver cellular landscape by single cell RNA-seq reveals novel intrahepatic monocyte/ macrophage populations': {
                'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-9/download?fileType=experiment-design&accessKey=',
                'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-9/download/zip?fileType=normalised&accessKey=',
                'filtered': None,
            },
            'Ischaemic sensitivity of human tissue by single cell RNA seq': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'Melanoma infiltration of stromal and immune cells': {
                'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-EHCA-2/download?fileType=experiment-design&accessKey=',
                'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-EHCA-2/download/zip?fileType=quantification-filtered&accessKey=',
                'filtered': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-EHCA-2/download/zip?fileType=quantification-filtered&accessKey=',
            },
            'Precursors of human CD4+ cytotoxic T lymphocytes identified by single-cell transcriptome analysis': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'Profiling of CD34+ cells from human bone marrow to understand hematopoiesis': {
                'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-6/download?fileType=experiment-design&accessKey=',
                'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-6/download/zip?fileType=normalised&accessKey=',
                'filtered': None,
            },
            'Reconstructing the human first trimester fetal-maternal interface using single cell transcriptomics': {
                'metadata': [
                    'https://www.ebi.ac.uk/gxa/sc/experiment/E-MTAB-6701/download?fileType=experiment-design&accessKey=',
                    'https://www.ebi.ac.uk/gxa/sc/experiment/E-MTAB-6678/download?fileType=experiment-design&accessKey='
                ],
                'matrix': [
                    'https://www.ebi.ac.uk/gxa/sc/experiment/E-MTAB-6701/download/zip?fileType=normalised&accessKey=',
                    'https://www.ebi.ac.uk/gxa/sc/experiment/E-MTAB-6678/download/zip?fileType=normalised&accessKey=',
                ],
                'filtered': None,
            },
            'Single Cell Transcriptomics of a Human Kidney Allograft Biopsy Defines a Diverse Inflammatory Response': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'Single cell profiling of human induced dendritic cells generated by direct reprogramming of embryonic fibroblasts': {
                'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-13/download?fileType=experiment-design&accessKey=',
                'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-13/download/zip?fileType=normalised&accessKey=',
                'filtered': None,
            },
            'Single cell transcriptome analysis of human pancreas reveals transcriptional signatures of aging and somatic mutation patterns.': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'Single-cell RNA-seq analysis  throughout a 125-day differentiation protocol that converted H1 human embryonic stem cells to a variety of ventrally-derived cell types.': {
                'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-GEOD-93593/download?fileType=experiment-design&accessKey=',
                'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-GEOD-93593/download/zip?fileType=normalised&accessKey=',
                'filtered': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-GEOD-93593/download/zip?fileType=quantification-filtered&accessKey=',
            },
            'Single-cell RNA-seq analysis of human pancreas from healthy individuals and type 2 diabetes patients': {
                'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-MTAB-5061/download?fileType=experiment-design&accessKey=',
                'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-MTAB-5061/download/zip?fileType=normalised&accessKey=',
                'filtered': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-MTAB-5061/download/zip?fileType=quantification-filtered&accessKey=',
            },
            'Spatio-temporal immune zonation of the human kidney': {
                'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-10/download?fileType=experiment-design&accessKey=',
                'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-10/download/zip?fileType=normalised&accessKey=',
                'filtered': None,
            },
            'Structural Remodeling of the Human Colonic Mesenchyme in Inflammatory Bowel Disease': {
                'metadata': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-11/download?fileType=experiment-design&accessKey=',
                'matrix': 'https://www.ebi.ac.uk/gxa/sc/experiment/E-HCAD-11/download/zip?fileType=normalised&accessKey=',
                'filtered': None,
            },
            'Systematic comparative analysis of single cell RNA-sequencing methods': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'Tabula Muris: Transcriptomic characterization of 20 organs and tissues from Mus musculus at single cell resolution': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'The Single Cell Transcriptomic Landscape of Early Human Diabetic Nephropathy': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'The emergent landscape of the mouse gut endoderm at single-cell resolution': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },
            'Transcriptomic classification of human retinal cell types with single-nuclei RNA-seq.': {
                'metadata': None,
                'matrix': None,
                'filtered': None,
            },

        }


        def update_min_max(old_min, old_max, new_min, new_max):
            min_rt = min(old_min, new_min)
            max_rt = max(old_max, new_max)

            return min_rt, max_rt


        class OntologyConversorHCA(OntologyConversorAbstract):

            ####################################################
            # region Define super class abstract methods

            def init_map(self):
                mapping_dict = {
                    'Melanoma(Disease)': 'Melanoma',
                    'Cataract(Disease)': 'Cataract',
                    'UlcerativeColitis(Disease)': 'UlcerativeColitis',
                    'Colitis(Disease)': 'UlcerativeColitis',
                    'BenignProstaticHyperplasia(Disease)': 'BenignProstaticHyperplasia',
                    'PericardialEffusion(Disease)': 'PericardialEffusion',
                    'HiatusHernia(Disease)': 'HiatusHernia',
                    'Hyperlipidemia(Disease)': 'Hyperlipidemia',
                    'Non-AlcoholicFattyLiverDisease': 'NonAlcoholicFattyLiverDisease',
                    'Hemolytic-UremicSyndrome': 'HemolyticUremicSyndrome',
                    'Osteoarthritis,Hip': 'OsteoarthritisHip',
                    'CAFs': 'Cancer-associatedFibroblasts(CAFs)',
                    'IlluminaHiseq2500': 'IlluminaHiSeq2500',
                    'Smart-Seq2': 'Smart-seq2',
                    'Smart-Seq': 'Smart-seq',
                    'Sci-RNA-Seq': 'Sci-RNA-seq',
                    'MARS-Seq': 'MARS-seq',
                    'CEL-Seq2': 'CEL-seq2',
                    'CITE-Seq': 'CITE-seq',
                    'DroNc-Seq': 'DroNc-seq',
                    'Drop-Seq': 'Drop-seq',
                    'Seq-Well': 'Seq-well',
                    'CD8-Positive,Alpha-BetaTCell': 'CD8+AlphaBetaTcell',
                    'CD11B+CD11C+DC': 'CD11b+CD11c+DC',
                    'CD11C+DC': 'CD11c+DC',
                    'CD11B+Macrophages/Monocytes': 'CD11b+Macrophages/Monocytes',
                    'CD34-Positive,CD38-NegativeHematopoieticStemCell': 'CD34+CD38-HematopoieticStemCell',
                    'EffectorMemoryCD8-Positive,Alpha-BetaTCell,TerminallyDifferentiated': 'EffectorMemoryCD8+AlphaBetaTCellTerminallyDifferentiated',
                    '10XV2Sequencing': '10Xv2Sequencing',
                    '10XV3Sequencing': '10xv3Sequencing',
                    "10X3'V1Sequencing": "10X3v1Sequencing",
                    "10X3'V2Sequencing": "10X3v2Sequencing",
                    "10X3'V3Sequencing": "10x3v3Sequencing",
                    "10X5'V2Sequencing": "10X5v2Sequencing",
                    'CDNALibraryConstruction': 'cDNALibraryConstruction',
                    'BladderOrgan': 'Bladder',
                    'MuscleOrgan': 'Muscle',
                    'SkinOfBody': 'Skin',
                    'SkinEpidermis': 'Epidermis',
                    'Cryopreservation,Other': 'CryopreservationOther',
                    'CryopreservationInLiquidNitrogen(DeadTissue)': 'CryopreservationInLiquidNitrogenDeadTissue',
                    'Optimus_V1.3.1': 'Optimus_v1.3.1',
                    'Optimus_V1.3.2': 'Optimus_v1.3.2',
                    'Optimus_V1.3.3': 'Optimus_v1.3.3',
                    'Optimus_V1.3.5': 'Optimus_v1.3.5',
                    'Smartseq2_V2.3.0': 'Smartseq2_v2.3.0',
                    'Smartseq2_V2.4.0': 'Smartseq2_v2.4.0',
                    'StemCell-Derived': 'StemCellDerived',
                    'Metadata': 'ExperimentDesign',
                    'Normal': 'Control',
                    'ObstructiveSleepApneaSyndrome': 'ObstructiveSleepApnea',
                    'CD4+TCell': 'Tcell',
                    'TCell': 'Tcell',
                    'BCell': 'Bcell',
                    'PresumptiveGut': 'presumptiveGut'
                }

                return mapping_dict

            def format_concrete_specimen(self, raw_specimen, specimen_id):
                specimen = Specimen(specimen_id)

                specimen.part_of_collection = "HumanCellAtlas"
                specimen.part_of_repository = "HumanCellAtlas"

                # Cell Lines
                specimen = self.__format_HCD_cell_lines(specimen, raw_specimen)

                # Cell Suspensions
                specimen = self.__format_HCD_cell_suspensions(specimen, raw_specimen)

                # Donor Organism
                specimen = self.__format_HCD_donor_organism_SR(specimen, raw_specimen)

                # Projects
                specimen = self.__format_HCD_projects(specimen, raw_specimen)

                # Organoids
                specimen = self.__format_HCD_organoids(specimen, raw_specimen)

                # Protocols
                specimen = self.__format_HCD_protocols(specimen, raw_specimen)

                # Samples
                specimen = self.__format_HCD_samples(specimen, raw_specimen)

                # Specimens
                specimen = self.__format_HCD_specimens_SR(specimen, raw_specimen)

                self.specimen = specimen

            def format_concrete_project(self, raw_project, project_id):

                project = Project(project_id)

                project.part_of_collection = "HumanCellAtlas"
                project.part_of_repository = "HumanCellAtlas"
                project.project_id = raw_project["entryId"]

                project.repository_link = "https://data.humancellatlas.org/explore/projects/" + project.project_id

                # Cell Lines
                project = self.__format_HCD_cell_lines(project, raw_project)

                # Protocols
                project = self.__format_HCD_protocols(project, raw_project)

                # Projects
                project = self.__format_HCD_projects_PR(project, raw_project)

                # Samples
                project = self.__format_HCD_samples(project, raw_project)

                # Specimens
                project = self.__format_HCD_specimens_PR(project, raw_project)

                # Donor Organism
                project = self.__format_HCD_donor_organism_PR(project, raw_project)

                # Organoids
                project = self.__format_HCD_organoids(project, raw_project)

                # Cell Suspensions
                project = self.__format_HCD_cell_suspensions(project, raw_project)

                project.normalised_counts_link = download_links[project.project_title]['matrix']
                project.experiment_design_link = download_links[project.project_title]['metadata']
                project.filtered_TPM_link = download_links[project.project_title]['filtered']

                self.project = project

            def parse_concrete(self, word):
                aux = list(word.title())

                for i in range(len(word)):
                    if word[i].isupper():
                        aux[i] = word[i]

                aux = ''.join(aux).replace(' ', '')

                return aux

            # endregion
            ####################################################

            ####################################################
            # region individual function auxiliar parts

            def __format_HCD_cell_lines(self, individual, individual_hca):
                if not individual_hca['cellLines']:
                    return individual

                cell_line_type = individual_hca['cellLines'][0]['cellLineType']
                model_organ = individual_hca['cellLines'][0]['modelOrgan']

                individual.cell_line_type = self.parse_word(cell_line_type)
                individual.model_organ = self.parse_word(model_organ)

                return individual

            def __format_HCD_cell_suspensions(self, individual, individual_hca):
                if not individual_hca['cellSuspensions']:
                    return individual

                selected_cell_type = []
                total_cells = 0

                for cellSuspension in individual_hca['cellSuspensions']:
                    selected_cell_type += cellSuspension['selectedCellType']
                    total_cells += 0 if cellSuspension['totalCells'] is None else cellSuspension['totalCells']

                if total_cells == 0:
                    total_cells = -1

                individual.cell_type = self.parse_word(selected_cell_type)
                individual.total_cell_counts = total_cells

                return individual

            def __format_HCD_projects(self, individual, individual_hca):
                if not individual_hca['projects']:
                    return individual

                laboratory = individual_hca['projects'][0]['laboratory']
                project_shortname = individual_hca['projects'][0]['projectShortname']
                project_title = individual_hca['projects'][0]['projectTitle']

                individual.laboratory = laboratory
                individual.project_short_name = project_shortname
                individual.project_title = project_title

                return individual

            def __format_HCD_organoids(self, individual, individual_hca):
                if not individual_hca['organoids']:
                    return individual

                model_organ = individual_hca['organoids'][0]['modelOrgan']

                individual.model_organ = self.parse_word(model_organ)

                return individual

            def __format_HCD_protocols(self, individual, individual_hca):
                if not individual_hca['protocols']:
                    return individual

                workflow = None
                library_construction_approach = None
                paired_end = None
                instrument_manufacturer_model = None
                nucleic_acid = None

                for protocol in individual_hca['protocols']:
                    if 'workflow' in protocol:
                        workflow = protocol['workflow']
                    if 'libraryConstructionApproach' in protocol:
                        library_construction_approach = protocol['libraryConstructionApproach']
                    if 'nucleicAcidSource' in protocol:
                        nucleic_acid = protocol['nucleicAcidSource']
                    if 'instrumentManufacturerModel' in protocol:
                        instrument_manufacturer_model = protocol['instrumentManufacturerModel']
                    if 'pairedEnd' in protocol:
                        paired_end = protocol['pairedEnd']

                individual.instrument = self.parse_word(instrument_manufacturer_model)
                individual.library = self.parse_word(library_construction_approach)
                individual.paired_end = paired_end
                individual.analysis_protocol = self.parse_word(workflow)
                individual.nucleic_acid = self.parse_word(nucleic_acid)

                return individual

            def __format_HCD_samples(self, individual, individual_hca):
                if not individual_hca['samples']:
                    return individual

                sample_entity_type = individual_hca['samples'][0]['sampleEntityType']

                individual.sample_type = self.parse_word(sample_entity_type)

                try:
                    preservation_method = individual_hca['samples'][0]['preservationMethod']

                    individual.preservation = self.parse_word(preservation_method)

                    return individual
                except:
                    return individual

            # endregion
            ####################################################

            ####################################################
            # region specimen function auxiliar parts

            def __format_HCD_specimens_SR(self, specimen, specimen_hca):
                if not specimen_hca['specimens']:
                    return specimen

                specimen = self.__format_HCD_specimens_PR(specimen, specimen_hca)

                sample_id = specimen_hca['specimens'][0]['id'][0]

                specimen.specimen_ID = sample_id

                return specimen

            def __format_HCD_donor_organism_SR(self, specimen, specimen_hca):
                if not specimen_hca['donorOrganisms']:
                    return specimen

                biological_sex = specimen_hca['donorOrganisms'][0]['biologicalSex']
                disease = specimen_hca['donorOrganisms'][0]['disease']
                genus_species = specimen_hca['donorOrganisms'][0]['genusSpecies']
                organism_ages = specimen_hca['donorOrganisms'][0]['organismAge']

                min_age = -1
                max_age = -1
                age_unit = None

                for organism_age in organism_ages:
                    if organism_age is None:
                        continue

                    age = organism_age['value']
                    if organism_age['unit'] is not None:
                        age_unit = organism_age['unit']

                    if age is not None and '-' in age:
                        min_age, max_age = update_min_max(min_age, max_age, int(age.split('-')[0]),
                                                          int(age.split('-')[1]))
                    else:
                        min_age, max_age = update_min_max(min_age, max_age, int(float(age)), int(float(age)))

                if min_age == float('inf'):
                    min_age = -1

                specimen.min_age = min_age
                specimen.max_age = max_age
                specimen.age_unit = age_unit

                specimen.biological_sex = biological_sex
                specimen.disease = self.parse_word(disease)
                specimen.specie = self.parse_word(genus_species)

                return specimen

            # endregion
            ####################################################

            ####################################################
            # region project function auxiliar parts

            def __format_HCD_donor_organism_PR(self, project, project_hca):
                if not project_hca['donorOrganisms']:
                    return project

                project = self.__format_HCD_donor_organism_SR(project, project_hca)

                donor_count = project_hca['donorOrganisms'][0]['donorCount']

                project.donor_count = donor_count

                return project

            def __format_HCD_projects_PR(self, project, project_hca):
                if not project_hca['projects']:
                    return project

                project_title = project_hca['projects'][0]['projectTitle']
                project_shortname = project_hca['projects'][0]['projectShortname']
                laboratory = project_hca['projects'][0]['laboratory']
                project_description = project_hca['projects'][0]['projectDescription']

                institutions = set()
                for contributor in project_hca['projects'][0]['contributors']:
                    institutions.add(contributor["institution"])

                publication_titles = []
                publication_links = []
                for publication in project_hca['projects'][0]['publications']:
                    publication_titles.append(publication['publicationTitle'])
                    publication_links.append(publication['publicationUrl'])

                array_express = project_hca['projects'][0]['arrayExpressAccessions']
                geo_series = project_hca['projects'][0]['geoSeriesAccessions']
                insdc_project = project_hca['projects'][0]['insdcProjectAccessions']
                insdc_study = project_hca['projects'][0]['insdcStudyAccessions']

                project.project_title = project_title
                project.project_short_name = project_shortname
                project.laboratory = laboratory
                project.project_description = project_description
                project.institutions = list(institutions)
                project.publication_title = publication_titles
                project.publication_link = publication_links

                project.array_express_id = "https://www.ebi.ac.uk/arrayexpress/experiments/" + array_express
                project.geo_series_id = "https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=" + geo_series
                project.insdc_project_id = "https://www.ebi.ac.uk/ena/browser/view/" + insdc_project
                project.insdc_study_id = "https://www.ebi.ac.uk/ena/browser/view/" + insdc_study

                return project

            def __format_HCD_specimens_PR(self, project, project_hca):
                if not project_hca['specimens']:
                    return project

                organ = project_hca['specimens'][0]['organ']
                organ_part = project_hca['specimens'][0]['organPart']
                num_specimens = len(project_hca['specimens'][0]['id'])
                preservation_method = project_hca['specimens'][0]['preservationMethod']

                project.organism_part = self.parse_word(organ)
                project.biopsy_site = self.parse_word(organ_part)
                project.specimen_count = num_specimens
                project.preservation = self.parse_word(preservation_method)

                return project

            def __format_HCD_donor_organism_PR(self, project, project_hca):
                if not project_hca['donorOrganisms']:
                    return project

                biological_sex = project_hca['donorOrganisms'][0]['biologicalSex']
                disease = project_hca['donorOrganisms'][0]['disease']
                genus_species = project_hca['donorOrganisms'][0]['genusSpecies']

                project.biological_sex = biological_sex
                project.disease = self.parse_word(disease)
                project.specie = self.parse_word(genus_species)

                return project

            # endregion
            ####################################################

        min_age = float('inf')
        max_age = -1
        age_unit = None

        for organism_age in organism_ages:
            if organism_age is None:
                continue

            age = organism_age['value']
            if organism_age['unit'] is not None:
                age_unit = organism_age['unit']

            if age is not None and '-' in age:
                min_age, max_age = update_min_max(min_age, max_age, int(age.split('-')[0]), int(age.split('-')[1]))
            else:
                min_age, max_age = update_min_max(min_age, max_age, int(float(age)), int(float(age)))

        if min_age == float('inf'):
            min_age = -1

        specimen.min_age = min_age
        specimen.max_age = max_age
        specimen.age_unit = age_unit

        specimen.biological_sex = biological_sex
        specimen.disease = self.parse_word(disease)
        specimen.specie = self.parse_word(genus_species)

        return specimen

    # endregion
    ####################################################

    ####################################################
    # region project function auxiliar parts

    def __format_HCD_donor_organism_PR(self, project, project_hca):
        if not project_hca['donorOrganisms']:
            return project

        project = self.__format_HCD_donor_organism_SR(project, project_hca)

        donor_count = project_hca['donorOrganisms'][0]['donorCount']

        project.donor_count = donor_count

        return project

    def __format_HCD_projects_PR(self, project, project_hca):
        if not project_hca['projects']:
            return project

        project_title = project_hca['projects'][0]['projectTitle']
        project_shortname = project_hca['projects'][0]['projectShortname']
        laboratory = project_hca['projects'][0]['laboratory']
        project_description = project_hca['projects'][0]['projectDescription']

        institutions = set()
        for contributor in project_hca['projects'][0]['contributors']:
            institutions.add(contributor["institution"])

        publication_titles = []
        publication_links = []
        for publication in project_hca['projects'][0]['publications']:
            publication_titles.append(publication['publicationTitle'])
            publication_links.append(publication['publicationUrl'])

        array_express = project_hca['projects'][0]['arrayExpressAccessions']
        geo_series = project_hca['projects'][0]['geoSeriesAccessions']
        insdc_project = project_hca['projects'][0]['insdcProjectAccessions']
        insdc_study = project_hca['projects'][0]['insdcStudyAccessions']

        project.project_title = project_title
        project.project_short_name = project_shortname
        project.laboratory = laboratory
        project.project_description = project_description
        project.institutions = list(institutions)
        project.publication_title = publication_titles
        project.publication_link = publication_links

        project.array_express_id = "https://www.ebi.ac.uk/arrayexpress/experiments/" + array_express
        project.geo_series_id = "https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=" + geo_series
        project.insdc_project_id = "https://www.ebi.ac.uk/ena/browser/view/" + insdc_project
        project.insdc_study_id = "https://www.ebi.ac.uk/ena/browser/view/" + insdc_study

        return project

    def __format_HCD_specimens_PR(self, project, project_hca):
        if not project_hca['specimens']:
            return project

        organ = project_hca['specimens'][0]['organ']
        organ_part = project_hca['specimens'][0]['organPart']
        num_specimens = len(project_hca['specimens'][0]['id'])
        preservation_method = project_hca['specimens'][0]['preservationMethod']

        project.organism_part = self.parse_word(organ)
        project.biopsy_site = self.parse_word(organ_part)
        project.specimen_count = num_specimens
        project.preservation = self.parse_word(preservation_method)

        return project

    def __format_HCD_donor_organism_PR(self, project, project_hca):
        if not project_hca['donorOrganisms']:
            return project

        biological_sex = project_hca['donorOrganisms'][0]['biologicalSex']
        disease = project_hca['donorOrganisms'][0]['disease']
        genus_species = project_hca['donorOrganisms'][0]['genusSpecies']

        project.biological_sex = biological_sex
        project.disease = self.parse_word(disease)
        project.specie = self.parse_word(genus_species)

        return project

    # endregion
    ####################################################
